* AutoKeep
:PROPERTIES:
:tangle: initialize.command
:shebang: #!/bin/sh
:END:

To get started, enter the commands in the following block, replacing ~project-name~ with your project's name.

#+BEGIN_SRC
mkdir project-name
cd !*
git clone https://github.com/ptb/autokeep.git .
sh initialize.command
#+END_SRC

The remainder of this document details what the ~initialize.command~ does.

** Set Constants and Working Directory

#+BEGIN_SRC sh
CWD="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
HOOKS="${CWD}/.git/hooks"
LABEL="com.github.ptb.autokeep.$(basename ${CWD})"
PLIST="${HOME}/Library/LaunchAgents/${LABEL}.plist"

cd "${CWD}"
#+END_SRC

** Initialize Git Repository

#+BEGIN_SRC sh
if [ -d "${CWD}/.git" ]; then
  while true; do
    read -n 1 -p "Re-Initialize Git Repository? " yn
    case $yn in
      [Yy]* ) rm -rf "${CWD}/.git"; break;;
      [Nn]* ) break;;
    esac
  done
  /bin/echo
fi

if [ ! -d "${CWD}/.git" ]; then
  git init
  git commit --allow-empty --allow-empty-message --message=
fi
#+END_SRC

** Add Remote Git Repository
#+BEGIN_SRC sh
if ! git ls-remote --exit-code github &> /dev/null; then
  wget \
    --output-document - \
    --quiet \
    "https://api.github.com/search/users?q=$(git config user.email)" \
    | sed -n "s/^.*html_url.*: \"\(.*\)\".*/\1?tab=repositories/p" \
    | xargs -L 1 open

  read -p "Remote Git Repository: " REPO_NAME
  /bin/echo

  if [[ ! -z "$REPO_NAME" ]]; then
    git remote add github "${REPO_NAME}"
    if git push --all --porcelain --set-upstream github | grep -q "rejected"; then
      /bin/echo
      while true; do
        read -n 1 -p "Force update? " yn
        case $yn in
          [Yy]* ) /bin/echo "\n"; git push --all --force --set-upstream github; break;;
          [Nn]* ) /bin/echo; break;;
        esac
      done
    fi
  fi
fi
#+END_SRC

** Create file '~.prepare-commit-msg~'
:PROPERTIES:
:tangle: .prepare-commit-msg
:shebang: #!/bin/sh
:END:

#+BEGIN_SRC sh
if git rev-parse --verify HEAD >/dev/null 2>&1; then
  against=HEAD
else
  # Initial commit: diff against an empty tree object
  against=$(git hash-object -t tree /dev/null)
fi

MSG=$(cat "$1")
/bin/echo -n '' > $1

i="0"
j=$(git diff-index --cached --find-renames --name-status $against | wc -l)

git diff-index --cached --find-renames --name-status $against | \
  while read line && [ $i -lt 10 ]; do
    status=$(cut -f1 <<< "$line")
    name=$(cut -f2 <<< "$line")
    if [[ $name =~ (.*\.app)\/.+ ]]; then
      if [[ $name =~ .*\.app\/Contents\/Info\.plist ]]; then
        name=$(/bin/echo $name | sed -n -E -e "s/(.*\.app).*/\1/p")
      else
        continue
      fi
    fi
    case $status in
      A) /bin/echo -n "add file '$name'" >> $1;;
      D) /bin/echo -n "delete file '$name'" >> $1;;
      M) /bin/echo -n "modify file '$name'" >> $1;;
      R*)
        name1=$(cut -f2 <<< "$line")
        name2=$(cut -f3- <<< "$line")
        /bin/echo -n "rename file '$name1' to '$name2'" >> $1;;
    esac
    printf '\0' >> $1
    i=$[$i+1]
    if [ $i -eq 10 ]; then
      j=$[$j-$i]
      /bin/echo -n "$j more file changes" >> $1
      printf '\0' >> $1
    fi
done

OXFORD=$(cat "$1" | perl -np -e 's/\0$//' | perl -np -e 's/(\0[^\0]+\0)([^\0]+)$/\1and \2/' | perl -np -e 's/^([^\0]+)\0([^\0]+)$/\1 and \2/' | perl -np -e 's/\0+/, /g' | perl -nE 'say ucfirst')
echo "$OXFORD" > $1
echo "$MSG" >> $1
#+END_SRC

** Link '~.prepare-commit-msg~' to '~.git/hooks/prepare-commit-msg~'

#+BEGIN_SRC sh
while true; do
  read -n 1 -p "Create commit messages automatically? " yn
  case $yn in
    [Yy]* ) /bin/sh -c "cd '${HOOKS}' && ln -f '../../.prepare-commit-msg' 'prepare-commit-msg'"; break;;
    [Nn]* ) rm -f ".prepare-commit-msg" "${HOOKS}/prepare-commit-msg"; break;;
  esac
done
/bin/echo
#+END_SRC

** Create file '~.post-commit~'
:PROPERTIES:
:tangle: .post-commit
:shebang: #!/bin/sh
:END:

#+BEGIN_SRC sh
if git ls-remote --exit-code github &> /dev/null; then
  git push --all --set-upstream github
  git push --tags --set-upstream github
fi
#+END_SRC

** Link '~.post-commit~' to '~.git/hooks/post-commit~'

#+BEGIN_SRC sh
if [ -d "${HOOKS}" ] && [ ! -e "${HOOKS}/post-commit" ]; then
  /bin/sh -c "cd '${HOOKS}' && ln '../../.post-commit' 'post-commit'"
fi
#+END_SRC

** Create file '~.gitignore~'
:PROPERTIES:
:tangle: .gitignore
:shebang:
:END:

#+BEGIN_SRC sh
# -*- mode: gitignore; -*-

**/Library/Caches/
**/Library/Saved\ Application\ State/

# Chrome downloads
*.crdownload

# Safari downloads
*.download/

# curl downloads
*.incomplete

# Firefox or Transmission downloads
*.part

*.plist.*
*.log
*.swp
*~
*~.skp
.\#*
\#*\#

.AppleDB
.AppleDesktop
.AppleDouble
.DS_Store
.DocumentRevisions-V100/
.LSOverride
.MobileBackups/
.Spotlight-V100/
.TemporaryItems/
.Trash/
.Trashes/
.VolumeIcon.icns
._*
.apdisk
.bundle
.checksums
.dropbox/
.dropbox.cache/
.fseventsd/
.sass-cache/
.svn/

node_modules/

/Network/*
/Previous Systems.localized/
/Volumes/*
/afs/*
/automount/*
/cores/*
/dev/*
/home/*
/net/*

/private/tmp/*
/private/var/folders/*
/private/var/run/*
/private/var/spool/postfix/*
/private/var/tmp/*
/private/var/vm/*

Icon
Network\ Trash\ Folder/
Temporary\ Items/

!.keep
#+END_SRC

** Git Commit Automatically

#+BEGIN_SRC sh
launchctl unload "${PLIST}" &> /dev/null

cat > "${PLIST}" <<-EOF
#+END_SRC

#+BEGIN_SRC sh
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>${LABEL}</string>
  <key>ProgramArguments</key>
  <array>
    <string>git</string>
    <string>commit</string>
    <string>--all</string>
    <string>--allow-empty-message</string>
    <string>--gpg-sign</string>
    <string>--message=</string>
  </array>
  <key>RunAtLoad</key>
  <true/>
  <key>WatchPaths</key>
  <array>
    <string>${CWD}</string>
  </array>
  <key>WorkingDirectory</key>
  <string>${CWD}</string>
</dict>
</plist>
#+END_SRC

#+BEGIN_SRC sh
EOF

plutil -convert xml1 "${PLIST}"
launchctl load "${PLIST}"

rm -f initialize.command autokeep.org readme.org
#+END_SRC
